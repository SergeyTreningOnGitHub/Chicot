// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: transaction.capnp

#include "transaction.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<62> b_e5b4b2af066bc8fe = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    254, 200, 107,   6, 175, 178, 180, 229,
     18,   0,   0,   0,   1,   0,   0,   0,
     83, 185, 102,  26,  57,  12, 145, 177,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 114,  97, 110, 115,  97,  99, 116,
    105, 111, 110,  46,  99,  97, 112, 110,
    112,  58,  84, 114,  97, 110, 115,  97,
     99, 116, 105, 111, 110,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    225,   2,  48, 205, 108, 224,  23, 131,
      9,   0,   0,   0,  58,   0,   0,   0,
    113, 165,  53,  56, 111, 120,  90, 186,
      5,   0,   0,   0,  50,   0,   0,   0,
     79, 117, 116, 112, 117, 116,   0,   0,
     73, 110, 112, 117, 116,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     56,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    111, 117, 116, 112, 117, 116, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    225,   2,  48, 205, 108, 224,  23, 131,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 112, 117, 116, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    113, 165,  53,  56, 111, 120,  90, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e5b4b2af066bc8fe = b_e5b4b2af066bc8fe.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e5b4b2af066bc8fe[] = {
  &s_8317e06ccd3002e1,
  &s_ba5a786f3835a571,
};
static const uint16_t m_e5b4b2af066bc8fe[] = {1, 0};
static const uint16_t i_e5b4b2af066bc8fe[] = {0, 1};
const ::capnp::_::RawSchema s_e5b4b2af066bc8fe = {
  0xe5b4b2af066bc8fe, b_e5b4b2af066bc8fe.words, 62, d_e5b4b2af066bc8fe, m_e5b4b2af066bc8fe,
  2, 2, i_e5b4b2af066bc8fe, nullptr, nullptr, { &s_e5b4b2af066bc8fe, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_8317e06ccd3002e1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    225,   2,  48, 205, 108, 224,  23, 131,
     30,   0,   0,   0,   1,   0,   1,   0,
    254, 200, 107,   6, 175, 178, 180, 229,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 114,  97, 110, 115,  97,  99, 116,
    105, 111, 110,  46,  99,  97, 112, 110,
    112,  58,  84, 114,  97, 110, 115,  97,
     99, 116, 105, 111, 110,  46,  79, 117,
    116, 112, 117, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    112, 114, 101, 118,  84, 120,  72,  97,
    115, 104,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 117, 116,  73, 100, 120,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,  99,  83, 105, 103, 110,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8317e06ccd3002e1 = b_8317e06ccd3002e1.words;
#if !CAPNP_LITE
static const uint16_t m_8317e06ccd3002e1[] = {2, 1, 0};
static const uint16_t i_8317e06ccd3002e1[] = {0, 1, 2};
const ::capnp::_::RawSchema s_8317e06ccd3002e1 = {
  0x8317e06ccd3002e1, b_8317e06ccd3002e1.words, 65, nullptr, m_8317e06ccd3002e1,
  0, 3, i_8317e06ccd3002e1, nullptr, nullptr, { &s_8317e06ccd3002e1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_ba5a786f3835a571 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    113, 165,  53,  56, 111, 120,  90, 186,
     30,   0,   0,   0,   1,   0,   1,   0,
    254, 200, 107,   6, 175, 178, 180, 229,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 114,  97, 110, 115,  97,  99, 116,
    105, 111, 110,  46,  99,  97, 112, 110,
    112,  58,  84, 114,  97, 110, 115,  97,
     99, 116, 105, 111, 110,  46,  73, 110,
    112, 117, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 117,  98,  75, 101, 121,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ba5a786f3835a571 = b_ba5a786f3835a571.words;
#if !CAPNP_LITE
static const uint16_t m_ba5a786f3835a571[] = {1, 0};
static const uint16_t i_ba5a786f3835a571[] = {0, 1};
const ::capnp::_::RawSchema s_ba5a786f3835a571 = {
  0xba5a786f3835a571, b_ba5a786f3835a571.words, 49, nullptr, m_ba5a786f3835a571,
  0, 2, i_ba5a786f3835a571, nullptr, nullptr, { &s_ba5a786f3835a571, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// Transaction
constexpr uint16_t Transaction::_capnpPrivate::dataWordSize;
constexpr uint16_t Transaction::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Transaction::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Transaction::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Transaction::Output
constexpr uint16_t Transaction::Output::_capnpPrivate::dataWordSize;
constexpr uint16_t Transaction::Output::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Transaction::Output::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Transaction::Output::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Transaction::Input
constexpr uint16_t Transaction::Input::_capnpPrivate::dataWordSize;
constexpr uint16_t Transaction::Input::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Transaction::Input::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Transaction::Input::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



